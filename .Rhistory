hugo
blogdown:::new_post_addin()
usethis::edit_r_profile(scope = "project")
setwd("C:/Hugo/Sites/academic-kickstart")
hugo server -D
blogdown:::hugo_version()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::build_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::insert_image_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown::build_site()
blogdown:::new_post_addin()
# Load the libraries
library(htmltools)
library(htmlwidgets)
library(widgetframe)
library(metricsgraphics)
library(RColorBrewer)
# Create the dataframe with the temperatures and whatnot
tmp <- data.frame(
temp = c(127,133,140,148,155),
sec = c(60,15,5,2,1),
stringssAsFactors = FALSE)
# Create hotdog plot
steak <- tmp %>%
mjs_plot(x=temp, y=sec) %>%
mjs_line(col = 'Red', animate_on_load = TRUE) %>%
mjs_labs(x="Degrees Farenheit", y="Seconds of contact") %>%
mjs_add_marker(133, "Medium rare steak") %>%
mjs_add_marker(153, "Medium well steak")
#  mjs_add_baseline(150, "Something Awful")
# Save to HTML
#library(htmlwidgets)
#saveWidget(steak, file = "./steak.html", selfcontained = TRUE)
# Load the libraries
library(htmltools)
library(htmlwidgets)
library(widgetframe)
library(metricsgraphics)
library(RColorBrewer)
# Create the dataframe with the temperatures and whatnot
tmp <- data.frame(
temp = c(127,133,140,148,155),
sec = c(60,15,5,2,1),
stringssAsFactors = FALSE)
# Create hotdog plot
steak <- tmp %>%
mjs_plot(x=temp, y=sec) %>%
mjs_line(col = 'Red', animate_on_load = TRUE) %>%
mjs_labs(x="Degrees Farenheit", y="Seconds of contact") %>%
mjs_add_marker(133, "Medium rare steak") %>%
mjs_add_marker(153, "Medium well steak")
#  mjs_add_baseline(150, "Something Awful")
# Save to HTML
#library(htmlwidgets)
#saveWidget(steak, file = "./steak.html", selfcontained = TRUE)
# Load the libraries
library(htmltools)
library(htmlwidgets)
library(widgetframe)
library(metricsgraphics)
library(RColorBrewer)
# Create the dataframe with the temperatures and whatnot
tmp <- data.frame(
temp = c(127,133,140,148,155),
sec = c(60,15,5,2,1),
stringssAsFactors = FALSE)
# Create hotdog plot
steak <- tmp %>%
mjs_plot(x=temp, y=sec) %>%
mjs_line(col = 'Red', animate_on_load = TRUE) %>%
mjs_labs(x="Degrees Farenheit", y="Seconds of contact") %>%
mjs_add_marker(133, "Medium rare steak") %>%
mjs_add_marker(153, "Medium well steak")
#  mjs_add_baseline(150, "Something Awful")
# Save to HTML
#library(htmlwidgets)
#saveWidget(steak, file = "./steak.html", selfcontained = TRUE)
steak
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
rmarkdown::render('syllabus.Rmarkdown',output_format = 'pdf_document')
rmarkdown::render('courses/401/syllabus.Rmarkdown',output_format = 'pdf_document')
rmarkdown::render('/courses/401/syllabus.Rmarkdown',output_format = 'pdf_document')
knitr::knit2pdf('syllabus.Rmarkdown','syllabus.pdf')
setwd("C:/Hugo/Sites/academic-kickstart/content/courses/401")
knitr::knit2pdf('syllabus.Rmarkdown','syllabus.pdf')
rmarkdown::render('syllabus.Rmarkdown',output_format = 'pdf_document')
rmarkdown::render('syllabus.Rmarkdown',output_format = 'pdf_document',toc = FALSE)
rmarkdown::render("syllabus.Rmarkdown", pdf_document(toc = FALSE))
rmarkdown::render(input = "syllabus.Rmarkdown", output_format = "pdf_document", output_options = "toc = FALSE")
rmarkdown::render(input = "syllabus.Rmarkdown", output_format = "pdf_document(toc = FALSE)")
rmarkdown::render(input = "syllabus.Rmarkdown", output_format = "pdf_document", output_options = "toc = "FALSE"")
setwd("C:/Hugo/Sites/academic-kickstart")
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
dfb <- read.csv(url("https://302.ryanstraight.com/correlation.csv"), header = TRUE)
comm <- dfb$comm
peers <- dfb$peers
dfa <- read.csv(url("https://302.ryanstraight.com/correlation.csv"), header = TRUE)
comm <- dfa$comm
peers <- dfa$peers
print(descr(dfa), method = 'render', style = 'rmarkdown', table.classes = 'st-small')
library(summarytools)    # That's how you make sure this chunk will run even if you run it all on its own.
print(descr(dfa), method = 'render', style = 'rmarkdown', table.classes = 'st-small')
print(dfSummary(dfa$spending), method = 'render')
dfa <- read.csv(url("https://302.ryanstraight.com/spending.csv"), header = TRUE) # This loads the data from the remote .csv file and saves it in our environment.
dfa  # That displays the data frame we've just created.
library(summarytools)    # That's how you make sure this chunk will run even if you run it all on its own.
print(descr(dfa), method = 'render', style = 'rmarkdown', table.classes = 'st-small')
print(dfSummary(dfa$spending), method = 'render')
hist(dfa$spending)
library(ggplot2)
ggplot(dfa, aes(x=spending)) +
geom_histogram(binwidth=2.5, color="black", fill="lightblue") +
geom_vline(aes(xintercept=mean(spending)), color="blue", linetype="dashed") +
labs(title="Spending histogram plot",x="Spent($USD)", y = "Count") +
theme_classic()
blogdown::build_site()
# Chunk 1: setup
library(knitr)
library(summarytools)
knitr::opts_chunk$set(echo = FALSE)
# Chunk 2: load data
# Why does it say "r load data" above? That gives the code chunk a name so its' easier to identify what's happening and where.
dfa <- read.csv(url("https://302.ryanstraight.com/spending.csv"), header = TRUE) # This loads the data from the remote .csv file and saves it in our environment.
dfa  # That displays the data frame we've just created.
# Chunk 3: summary
library(summarytools)    # That's how you make sure this chunk will run even if you run it all on its own.
print(descr(dfa), method = 'render', style = 'rmarkdown', table.classes = 'st-small')
# Chunk 4: dfsummary graph
print(dfSummary(dfa$spending), method = 'render')
# Chunk 5: histogram
hist(dfa$spending)
# Chunk 6: ggplot2
library(ggplot2)
ggplot(dfa, aes(x=spending)) +
geom_histogram(binwidth=2.5, color="black", fill="lightblue") +
geom_vline(aes(xintercept=mean(spending)), color="blue", linetype="dashed") +
labs(title="Spending histogram plot",x="Spent($USD)", y = "Count") +
theme_classic()
blogdown::build_site()
View(dfa)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
# Why does it say "r load data" above? That gives the code chunk a name so its' easier to identify what's happening and where.
dfa <- read.csv(url("https://302.ryanstraight.com/spending.csv"), header = TRUE) # This loads the data from the remote .csv file and saves it in our environment.
knitr::kable(dfa[1:5, ] caption = 'Spending') # That displays the data frame we've just created as a nice looking table. You could also simply type dfa. Try them both out.
# Why does it say "r load data" above? That gives the code chunk a name so its' easier to identify what's happening and where.
dfa <- read.csv(url("https://302.ryanstraight.com/spending.csv"), header = TRUE) # This loads the data from the remote .csv file and saves it in our environment.
kable(dfa[1:5, ] caption = 'Spending') # That displays the data frame we've just created as a nice looking table. You could also simply type dfa. Try them both out.
# Why does it say "r load data" above? That gives the code chunk a name so its' easier to identify what's happening and where.
dfa <- read.csv(url("https://302.ryanstraight.com/spending.csv"), header = TRUE) # This loads the data from the remote .csv file and saves it in our environment.
kable(summary(dfa[1:5, ]), caption = 'Spending') # That displays the data frame we've just created as a nice looking table. You could also simply type dfa. Try them both out.
# Why does it say "r load data" above? That gives the code chunk a name so its' easier to identify what's happening and where.
dfa <- read.csv(url("https://302.ryanstraight.com/spending.csv"), header = TRUE) # This loads the data from the remote .csv file and saves it in our environment.
kable(dfa) # That displays the data frame we've just created as a nice looking table. You could also simply type dfa. Try them both out.
# Why does it say "r load data" above? That gives the code chunk a name so its' easier to identify what's happening and where.
dfa <- read.csv(url("https://302.ryanstraight.com/spending.csv"), header = TRUE) # This loads the data from the remote .csv file and saves it in our environment.
kable(dfa), caption = "Spending" # That displays the data frame we've just created as a nice looking table. You could also simply type dfa. Try them both out.
# Why does it say "r load data" above? That gives the code chunk a name so its' easier to identify what's happening and where.
dfa <- read.csv(url("https://302.ryanstraight.com/spending.csv"), header = TRUE) # This loads the data from the remote .csv file and saves it in our environment.
kable(dfa) caption = "Spending" # That displays the data frame we've just created as a nice looking table. You could also simply type dfa. Try them both out.
# Why does it say "r load data" above? That gives the code chunk a name so its' easier to identify what's happening and where.
dfa <- read.csv(url("https://302.ryanstraight.com/spending.csv"), header = TRUE) # This loads the data from the remote .csv file and saves it in our environment.
kable(dfa, caption = "Spending") # That displays the data frame we've just created as a nice looking table. You could also simply type dfa. Try them both out.
# Why does it say "r load data" above? That gives the code chunk a name so its' easier to identify what's happening and where.
dfa <- read.csv(url("https://302.ryanstraight.com/spending.csv"), header = TRUE) # This loads the data from the remote .csv file and saves it in our environment.
kable(dfa[1:5, ], caption = "Spending") # That displays the data frame we've just created as a nice looking table. You could also simply type dfa. Try them both out.
blogdown::build_site()
#First, load the library
library(summarytools)    # That's how you make sure this chunk will run even if you run it all on its own.
# Next, display the summary.
print(descr(dfa), method = 'render', style = 'rmarkdown', table.classes = 'st-small')
print(dfSummary(dfa$spending), method = 'render')
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
servr::httw
servr::httw()
servr::daemon_stop(1)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
?blogdown::new_post
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
remotes::install_github("r-lib/styler")
blogdown::hugo_version()
blogdown:::new_post_addin()
?blogdown::new_post
